// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type IntentStatus string

const (
	IntentStatusRequiresInit IntentStatus = "requires_init"
	IntentStatusInitialized  IntentStatus = "initialized"
	IntentStatusApproved     IntentStatus = "approved"
	IntentStatusCanceled     IntentStatus = "canceled"
	IntentStatusDeclined     IntentStatus = "declined"
	IntentStatusError        IntentStatus = "error"
	IntentStatusProcessed    IntentStatus = "processed"
	IntentStatusTimedout     IntentStatus = "timedout"
	IntentStatusChargedback  IntentStatus = "chargedback"
)

func (e IntentStatus) ToPointer() *IntentStatus {
	return &e
}

func (e *IntentStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requires_init":
		fallthrough
	case "initialized":
		fallthrough
	case "approved":
		fallthrough
	case "canceled":
		fallthrough
	case "declined":
		fallthrough
	case "error":
		fallthrough
	case "processed":
		fallthrough
	case "timedout":
		fallthrough
	case "chargedback":
		*e = IntentStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntentStatus: %v", v)
	}
}
