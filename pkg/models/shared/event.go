// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"push-cash/v2/pkg/utils"
	"time"
)

// EventType - the type of event indicates how the status of the resource has changed
type EventType string

const (
	EventTypeIntentProcessed      EventType = "intent.processed"
	EventTypeIntentChargedback    EventType = "intent.chargedback"
	EventTypeTransactionAvailable EventType = "transaction.available"
)

func (e EventType) ToPointer() *EventType {
	return &e
}

func (e *EventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intent.processed":
		fallthrough
	case "intent.chargedback":
		fallthrough
	case "transaction.available":
		*e = EventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventType: %v", v)
	}
}

// SourceType - the type of the resource which has been updated
type SourceType string

const (
	SourceTypeIntent      SourceType = "intent"
	SourceTypeTransaction SourceType = "transaction"
)

func (e SourceType) ToPointer() *SourceType {
	return &e
}

func (e *SourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intent":
		fallthrough
	case "transaction":
		*e = SourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceType: %v", v)
	}
}

type Event struct {
	// when the event occurred
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// the type of event indicates how the status of the resource has changed
	EventType EventType `json:"event_type"`
	// the identifier for the event
	ID string `json:"id"`
	// the identifier of the resource who's status has updated
	SourceID string `json:"source_id"`
	// the type of the resource which has been updated
	SourceType SourceType `json:"source_type"`
}

func (e Event) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Event) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Event) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Event) GetEventType() EventType {
	if o == nil {
		return EventType("")
	}
	return o.EventType
}

func (o *Event) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Event) GetSourceID() string {
	if o == nil {
		return ""
	}
	return o.SourceID
}

func (o *Event) GetSourceType() SourceType {
	if o == nil {
		return SourceType("")
	}
	return o.SourceType
}
