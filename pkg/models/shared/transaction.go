// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// TransactionFeeDetailsType - Type of the fee
type TransactionFeeDetailsType string

const (
	TransactionFeeDetailsTypeUserSetupFee  TransactionFeeDetailsType = "user_setup_fee"
	TransactionFeeDetailsTypeInitiationFee TransactionFeeDetailsType = "initiation_fee"
	TransactionFeeDetailsTypePushTxnFee    TransactionFeeDetailsType = "push_txn_fee"
)

func (e TransactionFeeDetailsType) ToPointer() *TransactionFeeDetailsType {
	return &e
}

func (e *TransactionFeeDetailsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user_setup_fee":
		fallthrough
	case "initiation_fee":
		fallthrough
	case "push_txn_fee":
		*e = TransactionFeeDetailsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionFeeDetailsType: %v", v)
	}
}

type TransactionFeeDetails struct {
	// Push User ID associated with payment credential
	Amount int64 `json:"amount"`
	// Currency associated with the amount
	Currency Currency `json:"currency"`
	// Description of the fee
	Description string `json:"description"`
	// Type of the fee
	Type TransactionFeeDetailsType `json:"type"`
}

func (o *TransactionFeeDetails) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *TransactionFeeDetails) GetCurrency() Currency {
	if o == nil {
		return Currency("")
	}
	return o.Currency
}

func (o *TransactionFeeDetails) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *TransactionFeeDetails) GetType() TransactionFeeDetailsType {
	if o == nil {
		return TransactionFeeDetailsType("")
	}
	return o.Type
}

// TransactionSourceType - The type for the source entity of this transaction
type TransactionSourceType string

const (
	TransactionSourceTypeIntent   TransactionSourceType = "intent"
	TransactionSourceTypeTransfer TransactionSourceType = "transfer"
)

func (e TransactionSourceType) ToPointer() *TransactionSourceType {
	return &e
}

func (e *TransactionSourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intent":
		fallthrough
	case "transfer":
		*e = TransactionSourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionSourceType: %v", v)
	}
}

type TransactionSource struct {
	// The identifier of the source entity
	ID string `json:"id"`
	// The type for the source entity of this transaction
	Type TransactionSourceType `json:"type"`
}

func (o *TransactionSource) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TransactionSource) GetType() TransactionSourceType {
	if o == nil {
		return TransactionSourceType("")
	}
	return o.Type
}

// Transaction - Successful operation
type Transaction struct {
	// Gross amount of the transaction
	Amount int64 `json:"amount"`
	// When the funds from the transaction will be made available in the account balance (ISO 8061 date string)
	AvailableAt time.Time `json:"available_at"`
	// When the transaction was created (ISO 8061 date string)
	CreatedAt time.Time `json:"created_at"`
	// Currency associated with the amount
	Currency Currency `json:"currency"`
	// Fee paid to Push for the transaction
	Fee int64 `json:"fee"`
	// Details on the fees paid
	FeeDetails []TransactionFeeDetails `json:"fee_details"`
	// The unique identifier assigned by Push
	ID string `json:"id"`
	// Net amount of the transaction
	Net    int64             `json:"net"`
	Source TransactionSource `json:"source"`
	// Indicates how the funds from the transaction are represented in the account balance
	Status TransactionStatus `json:"status"`
}

func (o *Transaction) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *Transaction) GetAvailableAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.AvailableAt
}

func (o *Transaction) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Transaction) GetCurrency() Currency {
	if o == nil {
		return Currency("")
	}
	return o.Currency
}

func (o *Transaction) GetFee() int64 {
	if o == nil {
		return 0
	}
	return o.Fee
}

func (o *Transaction) GetFeeDetails() []TransactionFeeDetails {
	if o == nil {
		return []TransactionFeeDetails{}
	}
	return o.FeeDetails
}

func (o *Transaction) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Transaction) GetNet() int64 {
	if o == nil {
		return 0
	}
	return o.Net
}

func (o *Transaction) GetSource() TransactionSource {
	if o == nil {
		return TransactionSource{}
	}
	return o.Source
}

func (o *Transaction) GetStatus() TransactionStatus {
	if o == nil {
		return TransactionStatus("")
	}
	return o.Status
}
