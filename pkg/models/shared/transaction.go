// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"push-cash/v3/pkg/utils"
	"time"
)

// Type of the fee
type Type string

const (
	TypeUserSetupFee  Type = "user_setup_fee"
	TypeInitiationFee Type = "initiation_fee"
	TypePushTxnFee    Type = "push_txn_fee"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user_setup_fee":
		fallthrough
	case "initiation_fee":
		fallthrough
	case "push_txn_fee":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type FeeDetails struct {
	// Push User ID associated with payment credential
	Amount int64 `json:"amount"`
	// Currency associated with the amount
	Currency Currency `json:"currency"`
	// Description of the fee
	Description string `json:"description"`
	// Type of the fee
	Type Type `json:"type"`
}

func (o *FeeDetails) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *FeeDetails) GetCurrency() Currency {
	if o == nil {
		return Currency("")
	}
	return o.Currency
}

func (o *FeeDetails) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *FeeDetails) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

// TransactionType - The type for the source entity of this transaction
type TransactionType string

const (
	TransactionTypeIntent   TransactionType = "intent"
	TransactionTypeTransfer TransactionType = "transfer"
)

func (e TransactionType) ToPointer() *TransactionType {
	return &e
}

func (e *TransactionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "intent":
		fallthrough
	case "transfer":
		*e = TransactionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionType: %v", v)
	}
}

type Source struct {
	// The identifier of the source entity
	ID string `json:"id"`
	// The type for the source entity of this transaction
	Type TransactionType `json:"type"`
}

func (o *Source) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Source) GetType() TransactionType {
	if o == nil {
		return TransactionType("")
	}
	return o.Type
}

type Transaction struct {
	// Gross amount of the transaction
	Amount int64 `json:"amount"`
	// When the funds from the transaction will be made available in the account balance (ISO 8061 date string)
	AvailableAt time.Time `json:"available_at"`
	// When the transaction was created (ISO 8061 date string)
	CreatedAt time.Time `json:"created_at"`
	// Currency associated with the amount
	Currency Currency `json:"currency"`
	// Fee paid to Push for the transaction
	Fee int64 `json:"fee"`
	// Details on the fees paid
	FeeDetails []FeeDetails `json:"fee_details"`
	// The unique identifier assigned by Push
	ID string `json:"id"`
	// Net amount of the transaction
	Net    int64  `json:"net"`
	Source Source `json:"source"`
	// Indicates how the funds from the transaction are represented in the account balance
	Status TransactionStatus `json:"status"`
}

func (t Transaction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Transaction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Transaction) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *Transaction) GetAvailableAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.AvailableAt
}

func (o *Transaction) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Transaction) GetCurrency() Currency {
	if o == nil {
		return Currency("")
	}
	return o.Currency
}

func (o *Transaction) GetFee() int64 {
	if o == nil {
		return 0
	}
	return o.Fee
}

func (o *Transaction) GetFeeDetails() []FeeDetails {
	if o == nil {
		return []FeeDetails{}
	}
	return o.FeeDetails
}

func (o *Transaction) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Transaction) GetNet() int64 {
	if o == nil {
		return 0
	}
	return o.Net
}

func (o *Transaction) GetSource() Source {
	if o == nil {
		return Source{}
	}
	return o.Source
}

func (o *Transaction) GetStatus() TransactionStatus {
	if o == nil {
		return TransactionStatus("")
	}
	return o.Status
}
